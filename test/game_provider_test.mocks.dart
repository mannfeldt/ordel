// Mocks generated by Mockito 5.0.17 from annotations
// in ordel/test/game_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i10;
import 'package:firebase_analytics/firebase_analytics.dart' as _i2;
import 'package:flutter/cupertino.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ordel/models/game_round_model.dart' as _i9;
import 'package:ordel/models/multiplayer_game_model.dart' as _i5;
import 'package:ordel/models/user_model.dart' as _i3;
import 'package:ordel/services/firebase_client.dart' as _i8;
import 'package:ordel/services/local_storage.dart' as _i11;
import 'package:shared_preferences/shared_preferences.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseAnalytics_0 extends _i1.Fake
    implements _i2.FirebaseAnalytics {}

class _FakeUser_1 extends _i1.Fake implements _i3.User {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

class _FakeMultiplayerGame_3 extends _i1.Fake implements _i5.MultiplayerGame {}

class _FakeSharedPreferences_4 extends _i1.Fake
    implements _i6.SharedPreferences {}

/// A class which mocks [FirebaseAnalyticsObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalyticsObserver extends _i1.Mock
    implements _i2.FirebaseAnalyticsObserver {
  MockFirebaseAnalyticsObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAnalytics get analytics =>
      (super.noSuchMethod(Invocation.getter(#analytics),
          returnValue: _FakeFirebaseAnalytics_0()) as _i2.FirebaseAnalytics);
  @override
  _i2.ScreenNameExtractor get nameExtractor =>
      (super.noSuchMethod(Invocation.getter(#nameExtractor),
              returnValue: (_i7.RouteSettings settings) => '')
          as _i2.ScreenNameExtractor);
  @override
  void didPush(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i7.Route<dynamic>? newRoute, _i7.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didPop(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  bool debugObservingRoute(_i7.PageRoute<dynamic>? route) =>
      (super.noSuchMethod(Invocation.method(#debugObservingRoute, [route]),
          returnValue: false) as bool);
  @override
  void subscribe(_i7.RouteAware? routeAware, _i7.PageRoute<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#subscribe, [routeAware, route]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i7.RouteAware? routeAware) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [routeAware]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseClient extends _i1.Mock implements _i8.FirebaseClient {
  MockFirebaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPossibleInfiniteLoop =>
      (super.noSuchMethod(Invocation.getter(#isPossibleInfiniteLoop),
          returnValue: false) as bool);
  @override
  String get fcmToken =>
      (super.noSuchMethod(Invocation.getter(#fcmToken), returnValue: '')
          as String);
  @override
  _i4.Future<_i3.User> init() =>
      (super.noSuchMethod(Invocation.method(#init, []),
              returnValue: Future<_i3.User>.value(_FakeUser_1()))
          as _i4.Future<_i3.User>);
  @override
  _i4.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateUserProfile(_i3.User? user, bool? newName,
          bool? newColor, bool? newNotification) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateUserProfile, [user, newName, newColor, newNotification]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i3.User>> getFollowers() =>
      (super.noSuchMethod(Invocation.method(#getFollowers, []),
              returnValue: Future<List<_i3.User>>.value(<_i3.User>[]))
          as _i4.Future<List<_i3.User>>);
  @override
  _i4.Future<_i3.User?> getUser() =>
      (super.noSuchMethod(Invocation.method(#getUser, []),
          returnValue: Future<_i3.User?>.value()) as _i4.Future<_i3.User?>);
  @override
  _i4.Future<void> addFriend(_i3.User? user, _i3.User? newFriend) =>
      (super.noSuchMethod(Invocation.method(#addFriend, [user, newFriend]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> removeFriend(_i3.User? user, String? uid) =>
      (super.noSuchMethod(Invocation.method(#removeFriend, [user, uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i3.User>> getUsers() =>
      (super.noSuchMethod(Invocation.method(#getUsers, []),
              returnValue: Future<List<_i3.User>>.value(<_i3.User>[]))
          as _i4.Future<List<_i3.User>>);
  @override
  _i4.Future<List<_i9.SingleplayerGameRound>> getSingleplayerGames() =>
      (super.noSuchMethod(Invocation.method(#getSingleplayerGames, []),
              returnValue: Future<List<_i9.SingleplayerGameRound>>.value(
                  <_i9.SingleplayerGameRound>[]))
          as _i4.Future<List<_i9.SingleplayerGameRound>>);
  @override
  _i4.Future<void> createGame(_i9.GameRound? game) =>
      (super.noSuchMethod(Invocation.method(#createGame, [game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.MultiplayerGame>> getMultiplayerGames() =>
      (super.noSuchMethod(Invocation.method(#getMultiplayerGames, []),
              returnValue: Future<List<_i5.MultiplayerGame>>.value(
                  <_i5.MultiplayerGame>[]))
          as _i4.Future<List<_i5.MultiplayerGame>>);
  @override
  _i4.Future<_i5.MultiplayerGame?> getMultiplayerGame(String? gameId) =>
      (super.noSuchMethod(Invocation.method(#getMultiplayerGame, [gameId]),
              returnValue: Future<_i5.MultiplayerGame?>.value())
          as _i4.Future<_i5.MultiplayerGame?>);
  @override
  _i4.StreamSubscription<_i10.DocumentSnapshot<Object?>> subscribeToGame(
          String? gameId, Function? callback) =>
      (super.noSuchMethod(
              Invocation.method(#subscribeToGame, [gameId, callback]),
              returnValue:
                  _FakeStreamSubscription_2<_i10.DocumentSnapshot<Object?>>())
          as _i4.StreamSubscription<_i10.DocumentSnapshot<Object?>>);
  @override
  _i4.Future<_i5.MultiplayerGame> createMultiplayerGame(
          _i5.MultiplayerGame? game,
          List<_i3.User>? invitedUsers,
          _i3.User? hostUser) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createMultiplayerGame, [game, invitedUsers, hostUser]),
              returnValue:
                  Future<_i5.MultiplayerGame>.value(_FakeMultiplayerGame_3()))
          as _i4.Future<_i5.MultiplayerGame>);
  @override
  _i4.Future<_i5.MultiplayerGame> acceptGameInvite(
          _i5.MultiplayerGame? game, _i3.User? user, _i3.User? host) =>
      (super.noSuchMethod(
              Invocation.method(#acceptGameInvite, [game, user, host]),
              returnValue:
                  Future<_i5.MultiplayerGame>.value(_FakeMultiplayerGame_3()))
          as _i4.Future<_i5.MultiplayerGame>);
  @override
  _i4.Future<void> declineGameInvite(
          _i5.MultiplayerGame? game, _i3.User? user, _i3.User? host) =>
      (super.noSuchMethod(
          Invocation.method(#declineGameInvite, [game, user, host]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.MultiplayerGame> startGame(_i5.MultiplayerGame? game) =>
      (super.noSuchMethod(Invocation.method(#startGame, [game]),
              returnValue:
                  Future<_i5.MultiplayerGame>.value(_FakeMultiplayerGame_3()))
          as _i4.Future<_i5.MultiplayerGame>);
  @override
  _i4.Future<void> deleteGame(_i5.MultiplayerGame? game) =>
      (super.noSuchMethod(Invocation.method(#deleteGame, [game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateGame(_i5.MultiplayerGame? game) =>
      (super.noSuchMethod(Invocation.method(#updateGame, [game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> notifyGameHasEnded(
          List<_i3.User>? users, _i5.MultiplayerGame? game) =>
      (super.noSuchMethod(Invocation.method(#notifyGameHasEnded, [users, game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i11.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPossibleInfiniteLoop =>
      (super.noSuchMethod(Invocation.getter(#isPossibleInfiniteLoop),
          returnValue: false) as bool);
  @override
  _i4.Future<_i6.SharedPreferences> getPref() => (super.noSuchMethod(
          Invocation.method(#getPref, []),
          returnValue:
              Future<_i6.SharedPreferences>.value(_FakeSharedPreferences_4()))
      as _i4.Future<_i6.SharedPreferences>);
  @override
  _i4.Future<void> storeLastLoggedInVersion() =>
      (super.noSuchMethod(Invocation.method(#storeLastLoggedInVersion, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> getLastLoggedInVersion() =>
      (super.noSuchMethod(Invocation.method(#getLastLoggedInVersion, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<void> clearLastLoggedInVersion() =>
      (super.noSuchMethod(Invocation.method(#clearLastLoggedInVersion, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> storeActiveUser(_i3.User? user) =>
      (super.noSuchMethod(Invocation.method(#storeActiveUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i3.User?> getActiveUser() =>
      (super.noSuchMethod(Invocation.method(#getActiveUser, []),
          returnValue: Future<_i3.User?>.value()) as _i4.Future<_i3.User?>);
  @override
  _i4.Future<void> clearActiveUser() =>
      (super.noSuchMethod(Invocation.method(#clearActiveUser, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> storeLanguage(String? languageCode) =>
      (super.noSuchMethod(Invocation.method(#storeLanguage, [languageCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> getLanguage() =>
      (super.noSuchMethod(Invocation.method(#getLanguage, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<void> clearLanguage() =>
      (super.noSuchMethod(Invocation.method(#clearLanguage, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> clearUsers() =>
      (super.noSuchMethod(Invocation.method(#clearUsers, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> storeUsers(List<_i3.User>? users) =>
      (super.noSuchMethod(Invocation.method(#storeUsers, [users]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i11.CachedValue<List<_i3.User>>?> getUsers() =>
      (super.noSuchMethod(Invocation.method(#getUsers, []),
              returnValue: Future<_i11.CachedValue<List<_i3.User>>?>.value())
          as _i4.Future<_i11.CachedValue<List<_i3.User>>?>);
  @override
  _i4.Future<void> storeAnonGame(_i9.SingleplayerGameRound? game) =>
      (super.noSuchMethod(Invocation.method(#storeAnonGame, [game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i9.SingleplayerGameRound>> getAnonGames() =>
      (super.noSuchMethod(Invocation.method(#getAnonGames, []),
              returnValue: Future<List<_i9.SingleplayerGameRound>>.value(
                  <_i9.SingleplayerGameRound>[]))
          as _i4.Future<List<_i9.SingleplayerGameRound>>);
  @override
  _i4.Future<void> clearAnonGames() =>
      (super.noSuchMethod(Invocation.method(#clearAnonGames, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
