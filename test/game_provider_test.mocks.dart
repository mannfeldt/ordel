// Mocks generated by Mockito 5.0.17 from annotations
// in ordel/test/game_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:firebase_analytics/firebase_analytics.dart' as _i2;
import 'package:flutter/cupertino.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ordel/firebase_client.dart' as _i5;
import 'package:ordel/local_storage.dart' as _i8;
import 'package:ordel/models/game_round_model.dart' as _i7;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseAnalytics_0 extends _i1.Fake
    implements _i2.FirebaseAnalytics {}

class _FakeSharedPreferences_1 extends _i1.Fake
    implements _i3.SharedPreferences {}

/// A class which mocks [FirebaseAnalyticsObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalyticsObserver extends _i1.Mock
    implements _i2.FirebaseAnalyticsObserver {
  MockFirebaseAnalyticsObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAnalytics get analytics =>
      (super.noSuchMethod(Invocation.getter(#analytics),
          returnValue: _FakeFirebaseAnalytics_0()) as _i2.FirebaseAnalytics);
  @override
  _i2.ScreenNameExtractor get nameExtractor =>
      (super.noSuchMethod(Invocation.getter(#nameExtractor),
              returnValue: (_i4.RouteSettings settings) => '')
          as _i2.ScreenNameExtractor);
  @override
  void didPush(_i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i4.Route<dynamic>? newRoute, _i4.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didPop(_i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  bool debugObservingRoute(_i4.PageRoute<dynamic>? route) =>
      (super.noSuchMethod(Invocation.method(#debugObservingRoute, [route]),
          returnValue: false) as bool);
  @override
  void subscribe(_i4.RouteAware? routeAware, _i4.PageRoute<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#subscribe, [routeAware, route]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i4.RouteAware? routeAware) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [routeAware]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseClient extends _i1.Mock implements _i5.FirebaseClient {
  MockFirebaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPossibleInfiniteLoop =>
      (super.noSuchMethod(Invocation.getter(#isPossibleInfiniteLoop),
          returnValue: false) as bool);
  @override
  _i6.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<List<_i7.GameRound>> getGames() =>
      (super.noSuchMethod(Invocation.method(#getGames, []),
              returnValue: Future<List<_i7.GameRound>>.value(<_i7.GameRound>[]))
          as _i6.Future<List<_i7.GameRound>>);
  @override
  _i6.Future<void> createGame(_i7.GameRound? game) =>
      (super.noSuchMethod(Invocation.method(#createGame, [game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i8.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get LAST_LOGGED_IN_VERSION =>
      (super.noSuchMethod(Invocation.getter(#LAST_LOGGED_IN_VERSION),
          returnValue: '') as String);
  @override
  set LAST_LOGGED_IN_VERSION(String? _LAST_LOGGED_IN_VERSION) =>
      super.noSuchMethod(
          Invocation.setter(#LAST_LOGGED_IN_VERSION, _LAST_LOGGED_IN_VERSION),
          returnValueForMissingStub: null);
  @override
  bool get isPossibleInfiniteLoop =>
      (super.noSuchMethod(Invocation.getter(#isPossibleInfiniteLoop),
          returnValue: false) as bool);
  @override
  _i6.Future<_i3.SharedPreferences> getPref() => (super.noSuchMethod(
          Invocation.method(#getPref, []),
          returnValue:
              Future<_i3.SharedPreferences>.value(_FakeSharedPreferences_1()))
      as _i6.Future<_i3.SharedPreferences>);
  @override
  _i6.Future<void> storeLastLoggedInVersion() =>
      (super.noSuchMethod(Invocation.method(#storeLastLoggedInVersion, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<String?> getLastLoggedInVersion() =>
      (super.noSuchMethod(Invocation.method(#getLastLoggedInVersion, []),
          returnValue: Future<String?>.value()) as _i6.Future<String?>);
  @override
  _i6.Future<void> clearLastLoggedInVersion() =>
      (super.noSuchMethod(Invocation.method(#clearLastLoggedInVersion, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
